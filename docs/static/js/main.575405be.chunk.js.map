{"version":3,"sources":["resources/helper.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/Error.js","components/AddCategory.js","components/GifExpertApp.js","index.js"],"names":["getGif","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","title","GifGridItem","className","src","alt","GifGrid","useState","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","Error","AddCategory","setCategories","categories","inputValue","setInputValue","error","setError","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"kOAGaA,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,uDAHC,mCAGD,cACuDC,UAAUH,GADjE,kBAFD,MAEC,SAGKI,MAAMF,GAHX,cAGZG,EAHY,gBAIKA,EAASC,OAJd,uBAIVC,EAJU,EAIVA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UAVD,kBAcXN,GAdW,4CAAH,sDCQJO,EATK,SAAC,GAAoB,IAAlBD,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAC1B,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKJ,IACpB,4BAAIA,QCuBDK,EAzBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EAEZoB,mBAAS,CAC/Bb,KAAM,GACNc,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNzB,EAAOC,GACFyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGtB,IAEIC,EDd2BK,CAAa3B,GAAjCY,EAFgB,EAEtBL,KAAcc,EAFQ,EAERA,QAEtB,OACI,eAAC,WAAD,WACI,oBAAIL,UAAU,wCAAd,SAAuDhB,IAErDqB,GAAW,2CACb,qBAAKL,UAAU,WAAf,SAEQJ,EAAOH,KAAI,SAAAmB,GAAK,OACZ,cAAC,EAAD,eAGQA,GAFCA,EAAMjB,aENxBkB,EATD,WACV,OACI,yFCgDOC,EAhDK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WAAiB,EAEfZ,mBAAS,IAFM,mBAE5Ca,EAF4C,KAEhCC,EAFgC,OAGzBd,oBAAS,GAHgB,mBAG5Ce,EAH4C,KAGrCC,EAHqC,KA8BnD,OACI,uBACIC,SAtBa,SAACC,GAClBA,EAAEC,iBAEEN,EAAWO,OAAOC,OAAS,GAAoB,KAAfT,GAEhCD,EAAc,CACVE,IAIJC,EAAc,IAGdE,GAAS,IAGTA,GAAS,IAKb,UAGOD,EAAS,cAAC,EAAD,IAAY,GACxB,uBACIO,KAAK,OACLC,MAAOV,EACPW,SAjCc,SAACN,GACvBJ,EAAcI,EAAEO,OAAOF,cC2BhBG,EA9BM,WAAO,IAAD,EACa1B,mBAAS,CAAC,cADvB,mBAChBY,EADgB,KACJD,EADI,KAYvB,OACI,gCACI,gDAEA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBAEEC,EAAWvB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAEzBA,SAAUA,EACVgC,WAAYA,GAFPhC,UCxBrB+C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.575405be.chunk.js","sourcesContent":["export const API_KEY = 'NTZn3JDv4dGVumbcYQkffzFAE6dnoY1K';\r\nexport const LIMIT = '10';\r\n\r\nexport const getGif = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${encodeURI(category)}&limit=${LIMIT}`;\r\n\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            url: img.images?.downsized_medium.url,\r\n            title: img.title,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifGridItem;","import React, { Fragment } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeInDown\">{category}</h3>\r\n\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"cardGrid\">\r\n                {\r\n                    images.map(image =>\r\n                        <GifGridItem\r\n                            key={image.id}\r\n                            // Al enviarlo así, envia cada uno de los parametros como si fueran propiedades enviadas del componente\r\n                            {...image}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getGif } from '../resources/helper';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, []);\r\n\r\n    return state;\r\n}","import React from 'react';\r\n\r\nconst Error = () => {\r\n    return (\r\n        <div>\r\n            Por favor digite más de 2 letras en la búsqueda\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Error;","import { useState } from \"react\";\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories, categories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    //Al hacer enter se haga submit del formulario\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2 && categories !== '') {\r\n            // Se hace con un callback que obtiene el estado anterior el cual se guarda en catego\r\n            setCategories([\r\n                inputValue\r\n            ]);\r\n\r\n            // Limpiar la caja de texto\r\n            setInputValue('');\r\n\r\n            // QUitar error\r\n            setError(false);\r\n\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            { (error) ? <Error /> : ''}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AddCategory;","import React, { useState } from 'react';\r\nimport GifGrid from './GifGrid';\r\nimport AddCategory from './AddCategory';\r\n\r\n// const categories = ['Prueba', 'Prueba2', 'Prueba 3'];\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Fútbol']);\r\n\r\n    //Agregar elementos dando click a un botón\r\n\r\n    /* const handleAddNewEvent = () => {\r\n        setCategories([\r\n            ...categories,\r\n            'The Simpson Show'\r\n        ]);\r\n    } */\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif Expert App</h2>\r\n\r\n            <AddCategory\r\n                setCategories={setCategories}\r\n            />\r\n            <hr />\r\n\r\n            { categories.map(category => <GifGrid\r\n                key={category}\r\n                category={category}\r\n                categories={categories}\r\n            />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}